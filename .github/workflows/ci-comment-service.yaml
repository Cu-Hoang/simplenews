name: ci-comment-service
on:
  workflow_dispatch:

  push:
    branches:
      - feature/**
    paths:
      - apps/comment-service/**
      - "!apps/comment-service/README.md"
    
  pull_request:
    branches:
      - dev
      - main
    paths:
      - apps/comment-service/**
      - "!apps/comment-service/README.md"

permissions:
  contents: write

jobs:
  build-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ['22.14.0']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version}}
        cache: npm

    - name: Check Node.js version
      run: |
        node_version=$(node --version | sed 's/v//')
        required_version=$(node -p "require('./package.json').engines.node")
        if [[ ! "$node_version" == "$required_version" ]]; then
          echo "Error: Node.js version $node_version does not match required version $required_version"
          exit 1
        fi

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: Check security vulnerabilities
      run: npm audit --audit-level=high

    - name: Build project
      run: |
        npx nx sync
        npx nx build common
        npx nx build comment-service

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
          args: >
            -Dsonar.projectKey=Cu-Hoang_simplenews
            -Dsonar.organization=ng
            -Dsonar.exclusions=apps/user-service,apps/article-service,apps/auth-service,apps/api-gateway,apps/user-service-e2e,apps/api-gateway-e2e,apps/article-service-e2e,apps/auth-service-e2e,apps/comment-service-e2e

  docker:
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' }}
    needs: build-test
    runs-on: ubuntu-latest
    outputs:
      image_sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: 'fs'
          scan-ref: './apps/comment-service'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Get SHA 
        id: get_sha
        run: |
          SHA=$(git log -n 1 --pretty=format:%h -- apps/comment-service)
          echo "sha=$SHA" >> $GITHUB_OUTPUT

      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.dockerfile
          build-args: |
            SERVICE=comment-service
            HTTP_PORT=3004
          push: false
          load: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/comment-service:${{ steps.get_sha.outputs.sha }}
            ${{ secrets.DOCKER_USERNAME }}/comment-service:main

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: '${{ secrets.DOCKER_USERNAME }}/comment-service:${{ steps.get_sha.outputs.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/comment-service:${{ steps.get_sha.outputs.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/comment-service:main

  update-values:
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' }}
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Update Helm values
        run: |
          yq -i '.containers.image.tag = "${{ needs.docker.outputs.image_sha }}"' helm-charts/comment-service/values.yaml

      - name: Commit updated values.yaml
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git pull origin ${{ github.head_ref }} --rebase
          git add helm-charts/comment-service/values.yaml
          git commit -m "chore: update image tag in values.yaml for comment-service to ${{ needs.docker.outputs.image_sha }}"
          git push origin HEAD:${{ github.head_ref }}